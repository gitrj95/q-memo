simple memo lib

motivation
- functions that are expensive to compute, call repeatedly, and produce a small result should lookup
  against a cache table, i.e. memoized
- e.g. intermediate steps in parse trees evaluated inside a canonical HDB are often repeated,
  expensive to compute, and produce small results
- e.g. certain algorithms are much simpler to impl recursively (without scan or over), but they
  require memo lookup to be reasonably efficient
- the process of memoizing a function should be agnostic to the function, undoable, and configurable

interface
.memo.C        cache capacity. defaults to 100h. can be any short
.memo.P        cache table parent structure name. defaults to `cache. can be any symbol

.memo.init     initializes a cache table given a namespace and size
.memo.initns   initializes a cache table given a namespace
.memo.initsize initializes a cache table given a size
.memo.mk       makes a memoized copy of a function given a source, target, and cache table
.memo.mkmut    mutates a given function into its memoized copy given a source
.memo.mknew    makes a memoized copy of a function given a source and target
.memo.rm       removes a memoized function and clears its cached data given a source
.memo.rs       resizes a cache table given a cache name and size
.memo.mv       moves a memoized function to a new cache table given a source and cache name

examples
q)/ .memo.init takes a [namespace;<short>]
q).memo.init[`.;2h]
`..cache.0
q)/ a cache table, named `0, is created within `cache in `.
q)cache
 | ::
0| (+`f`a!(,`;,::))!+(,`r)!,,::

q)/ .memo.initns is shorthand for .memo.init, using C as the cache size
q).memo.initns[]
`..cache.1

q)/ .memo.initsize is shorthand for .memo.init, using \d as the namespace
q)\d .a
q).memo.initsize 2h
`.a.cache.0

q)/ (::) or ` may be used to reference \d
q).memo.initns`
`.a.cache.1

q)/ .memo.mk takes a [function;<symbol>;<symbol>]
q)f:sum;.memo.mk[`f;`g;`cache.0]
`.a.g

q)/ `g is a memoized copy of `f with the same arity, and it points to `.a.cache.0
q)g 1 2 3
6
q)g 4 5 6
15
q)cache.0
f    a     | r 
-----------| --
     ::    | ::
.a.g ,1 2 3| 6 
.a.g ,4 5 6| 15

q)/ .memo.mkmut is shorthand for .memo.mk, mutating the function in place and using the most recent
q)/ cache table
q)h:div;.memo.mkmut`h
`.a.h

q)/ .memo.mknew is shorthand for .memo.mk, using the most recent cache table
q)j:prd;.memo.mknew[`j;`j1]
`.a.j1

q)/ .memo.mk can also take a function as a lambda
q).memo.mk[min;`f1;`cache.1]
`.a.f1

q)/ a null second argument will use the same name as the first, like .memo.mkmut
q)f2:max;.memo.mk[`f2;`;`cache.0]
`.a.f2

q)/ removing a memoized function that was made in place reverts the impl
q).memo.rm`h
`.a.h
q)h
div

q)/ if made with a literal, the source literal is returned
q).memo.rm`f1
min

q)/ if made with a symbol, the source symbol is returned
q).memo.rm`g
`.a.f

q)/ in all cases, the memoized copy no longer exists
q)g
'g

q)/ any removal of a memoized function clears its cached data
q)cache.0
f a | r 
----| --
  ::| ::

q)/ .memo.rs takes a [cache;<short>]
q).memo.rs[`cache.1;2h]
`.a.cache.1
q)j1 1 2 3;j1 2 3 4;cache.1
f     a     | r 
------------| --
      ::    | ::
.a.j1 ,1 2 3| 6 
.a.j1 ,2 3 4| 24

q)/ resizing a cache to below its capacity trims it
q).memo.rs[`cache.1;1h]
`.a.cache.1
q)cache.1
f     a     | r 
------------| --
      ::    | ::
.a.j1 ,2 3 4| 24

q)/ .memo.mv takes a [<symbol>;<symbol>] as its function and cache table, respectively
q).memo.mv[`j1;`..cache.0]
`.a.j1
q)/ its cached data has moved
q)cache.1
f a | r 
----| --
  ::| ::
q)\d .
q)cache.0
f     a     | r 
------------| --
      ::    | ::
.a.j1 ,2 3 4| 24
q)/ and it now points to this new cache, too
q).a.j1 5 6 7
210
q)cache.0
f     a     | r  
------------| ---
      ::    | :: 
.a.j1 ,2 3 4| 24 
.a.j1 ,5 6 7| 210

pitfalls
q)/ if passed as a literal, its new name can't be null
q).memo.mknew[sums;`]
'null

q)/ don't play with the parent structure
q)cache:10
q)/ all memoized functions that point here will no longer work
q).a.j1 10 11
'0
